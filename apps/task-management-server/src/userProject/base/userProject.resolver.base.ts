/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserProject } from "./UserProject";
import { UserProjectCountArgs } from "./UserProjectCountArgs";
import { UserProjectFindManyArgs } from "./UserProjectFindManyArgs";
import { UserProjectFindUniqueArgs } from "./UserProjectFindUniqueArgs";
import { CreateUserProjectArgs } from "./CreateUserProjectArgs";
import { UpdateUserProjectArgs } from "./UpdateUserProjectArgs";
import { DeleteUserProjectArgs } from "./DeleteUserProjectArgs";
import { User } from "../../user/base/User";
import { Project } from "../../project/base/Project";
import { Role } from "../../role/base/Role";
import { UserProjectService } from "../userProject.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserProject)
export class UserProjectResolverBase {
  constructor(
    protected readonly service: UserProjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserProject",
    action: "read",
    possession: "any",
  })
  async _userProjectsMeta(
    @graphql.Args() args: UserProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserProject])
  @nestAccessControl.UseRoles({
    resource: "UserProject",
    action: "read",
    possession: "any",
  })
  async userProjects(
    @graphql.Args() args: UserProjectFindManyArgs
  ): Promise<UserProject[]> {
    return this.service.userProjects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserProject, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserProject",
    action: "read",
    possession: "own",
  })
  async userProject(
    @graphql.Args() args: UserProjectFindUniqueArgs
  ): Promise<UserProject | null> {
    const result = await this.service.userProject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserProject)
  @nestAccessControl.UseRoles({
    resource: "UserProject",
    action: "create",
    possession: "any",
  })
  async createUserProject(
    @graphql.Args() args: CreateUserProjectArgs
  ): Promise<UserProject> {
    return await this.service.createUserProject({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserProject)
  @nestAccessControl.UseRoles({
    resource: "UserProject",
    action: "update",
    possession: "any",
  })
  async updateUserProject(
    @graphql.Args() args: UpdateUserProjectArgs
  ): Promise<UserProject | null> {
    try {
      return await this.service.updateUserProject({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserProject)
  @nestAccessControl.UseRoles({
    resource: "UserProject",
    action: "delete",
    possession: "any",
  })
  async deleteUserProject(
    @graphql.Args() args: DeleteUserProjectArgs
  ): Promise<UserProject | null> {
    try {
      return await this.service.deleteUserProject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserProject): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async getProject(
    @graphql.Parent() parent: UserProject
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  async getRole(@graphql.Parent() parent: UserProject): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
