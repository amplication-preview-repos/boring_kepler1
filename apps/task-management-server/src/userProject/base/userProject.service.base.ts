/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserProject as PrismaUserProject,
  Project as PrismaProject,
  Role as PrismaRole,
  User as PrismaUser,
} from "@prisma/client";

export class UserProjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserProjectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userProject.count(args);
  }

  async userProjects(
    args: Prisma.UserProjectFindManyArgs
  ): Promise<PrismaUserProject[]> {
    return this.prisma.userProject.findMany(args);
  }
  async userProject(
    args: Prisma.UserProjectFindUniqueArgs
  ): Promise<PrismaUserProject | null> {
    return this.prisma.userProject.findUnique(args);
  }
  async createUserProject(
    args: Prisma.UserProjectCreateArgs
  ): Promise<PrismaUserProject> {
    return this.prisma.userProject.create(args);
  }
  async updateUserProject(
    args: Prisma.UserProjectUpdateArgs
  ): Promise<PrismaUserProject> {
    return this.prisma.userProject.update(args);
  }
  async deleteUserProject(
    args: Prisma.UserProjectDeleteArgs
  ): Promise<PrismaUserProject> {
    return this.prisma.userProject.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.userProject
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }

  async getRole(parentId: string): Promise<PrismaRole | null> {
    return this.prisma.userProject
      .findUnique({
        where: { id: parentId },
      })
      .role();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userProject
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
