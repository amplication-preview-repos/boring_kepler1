/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserTask } from "./UserTask";
import { UserTaskCountArgs } from "./UserTaskCountArgs";
import { UserTaskFindManyArgs } from "./UserTaskFindManyArgs";
import { UserTaskFindUniqueArgs } from "./UserTaskFindUniqueArgs";
import { CreateUserTaskArgs } from "./CreateUserTaskArgs";
import { UpdateUserTaskArgs } from "./UpdateUserTaskArgs";
import { DeleteUserTaskArgs } from "./DeleteUserTaskArgs";
import { User } from "../../user/base/User";
import { Task } from "../../task/base/Task";
import { UserTaskService } from "../userTask.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserTask)
export class UserTaskResolverBase {
  constructor(
    protected readonly service: UserTaskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserTask",
    action: "read",
    possession: "any",
  })
  async _userTasksMeta(
    @graphql.Args() args: UserTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserTask])
  @nestAccessControl.UseRoles({
    resource: "UserTask",
    action: "read",
    possession: "any",
  })
  async userTasks(
    @graphql.Args() args: UserTaskFindManyArgs
  ): Promise<UserTask[]> {
    return this.service.userTasks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserTask, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserTask",
    action: "read",
    possession: "own",
  })
  async userTask(
    @graphql.Args() args: UserTaskFindUniqueArgs
  ): Promise<UserTask | null> {
    const result = await this.service.userTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserTask)
  @nestAccessControl.UseRoles({
    resource: "UserTask",
    action: "create",
    possession: "any",
  })
  async createUserTask(
    @graphql.Args() args: CreateUserTaskArgs
  ): Promise<UserTask> {
    return await this.service.createUserTask({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserTask)
  @nestAccessControl.UseRoles({
    resource: "UserTask",
    action: "update",
    possession: "any",
  })
  async updateUserTask(
    @graphql.Args() args: UpdateUserTaskArgs
  ): Promise<UserTask | null> {
    try {
      return await this.service.updateUserTask({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserTask)
  @nestAccessControl.UseRoles({
    resource: "UserTask",
    action: "delete",
    possession: "any",
  })
  async deleteUserTask(
    @graphql.Args() args: DeleteUserTaskArgs
  ): Promise<UserTask | null> {
    try {
      return await this.service.deleteUserTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserTask): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  @nestAccessControl.UseRoles({
    resource: "Task",
    action: "read",
    possession: "any",
  })
  async getTask(@graphql.Parent() parent: UserTask): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
