/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserTask as PrismaUserTask,
  User as PrismaUser,
  Task as PrismaTask,
} from "@prisma/client";

export class UserTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserTaskCountArgs, "select">): Promise<number> {
    return this.prisma.userTask.count(args);
  }

  async userTasks(
    args: Prisma.UserTaskFindManyArgs
  ): Promise<PrismaUserTask[]> {
    return this.prisma.userTask.findMany(args);
  }
  async userTask(
    args: Prisma.UserTaskFindUniqueArgs
  ): Promise<PrismaUserTask | null> {
    return this.prisma.userTask.findUnique(args);
  }
  async createUserTask(
    args: Prisma.UserTaskCreateArgs
  ): Promise<PrismaUserTask> {
    return this.prisma.userTask.create(args);
  }
  async updateUserTask(
    args: Prisma.UserTaskUpdateArgs
  ): Promise<PrismaUserTask> {
    return this.prisma.userTask.update(args);
  }
  async deleteUserTask(
    args: Prisma.UserTaskDeleteArgs
  ): Promise<PrismaUserTask> {
    return this.prisma.userTask.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userTask
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getTask(parentId: string): Promise<PrismaTask | null> {
    return this.prisma.userTask
      .findUnique({
        where: { id: parentId },
      })
      .task();
  }
}
