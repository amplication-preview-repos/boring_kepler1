datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userProjects UserProject[]
  name         String?
  permissions  Permission[]
  users        User[]
}

model Project {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  description  String?
  name         String?
  owner        String?
  userProjects UserProject[]
}

model UserProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    String?
}

model Permission {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  description    String?
  role           Role?    @relation(fields: [roleId], references: [id])
  roleId         String?
  canCreateTasks Boolean?
}

model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  firstName    String?
  lastName     String?
  username     String        @unique
  email        String?       @unique
  password     String
  roles        Json
  userProjects UserProject[]
  tasks        Task[]
  userTasks    UserTask[]
  role         Role?         @relation(fields: [roleId], references: [id])
  roleId       String?
}

model Task {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  dueDate     DateTime?
  status      EnumTaskStatus?
  title       String?
  description String?
  user        User?           @relation(fields: [userId], references: [id])
  userId      String?
  userTasks   UserTask[]
}

model UserTask {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?
}

model Manager {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  canCreateTasks Boolean?
}

enum EnumTaskStatus {
  Option1
}
